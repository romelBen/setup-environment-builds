---
- hosts: all
  become: true
  vars_files:
    - vars/server-setup.yml

  tasks:
###### Create wheel group
    - name: Setup 'wheel' group
      group:
        name: wheel
        state: present

    ### Setup wheel group to not have passwordless
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    ### Set created user to wheel group with sudo privileges
    - name: Create a regular user with sudo privileges to wheel group
      user:
        name: "{{ create_user }}"
        state: present
        groups:
          - wheel
        append: true
        create_home: true
        shell: /bin/bash

###### IMPORTANT: Make sure to create an SSH key on your local computer.
###### This can be done using this command: ssh-keygen -t rsa -b 4096 -C "email_here@domain.com"
###### This will setup user, pull local SSH key from local computer, and disable password authentication for root
    - name: Set authorized key for remote user
      ansible.posix.authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'

###### PPA Repository Setup
###### Add a complete set of repositories into the source list to be updated to the latest version.
###### The only repositories that are up to date are git, ansible, and vagrant. The others will have to be
###### installed separately.
    - name: Add stable repositories from PPA to system
      apt_repository:
          repo: "{{ item }}"
      loop:
        - ppa:git-core/ppa				 	      # Latest git repo
        - ppa:tiagohillebrandt/vagrant		# Latest Vagrant repo (this is a personal ppa so be cautious)
        - ppa:teejee2008/ppa              # Latest Timeshift repo (enables snapshot backup capability)
        - ppa:yubico/stable               # Latest Yubico repo following FIDO2 Authorization (uses an External Authenticator to sign into applications especially Linux distros)
#        - ppa:videolan/stable-daily      # Latest VLC repo

    # Adds the latest Ansible repo to all distros except Ubuntu 20.04.
    # As of Dec. 22, 2020, it is still NOT supported.
    - name: Add Ansible repository only to all distros, EXCEPT 20.04
      apt_repository:
          repo: ppa:ansible/ansible
      when: (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_major_version'] != "20")111

###### Node.js Setup
###### Setup Node.js's GPG key and repository
    - name: Add Node.js GPG apt key
      apt_key:
          url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
          state: present

    - name: Add NodeSource repositories for Node.js
      apt_repository:
        repo: "{{ item }}"
        state: present
      loop:
        # For future reference, {{ ansible_distribution_release }} is identical to the command $(lsb_release -cs).
        # This is a builtin command in Ansible which will be "Gathering Facts" of our distro version, and apply that
        # in our parameter {{ ansible_distribution_release }}.
        - deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main
        - deb-src https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main

###### Docker Setup
###### Setup Docker's GPG key and repository. It is recommended prior to installation to have
###### these apps installed: apt-transport-https, ca-certificates, curl, gnupg-agent, and software-properties-common.
    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
          repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
          state: present

###### Visual Studio Code Setup
###### Setup Visual Studio Code GPG key and repository. It is recommended prior to installation
###### to have these apps installed: software-properties-common and apt-transport-https.
###### IMPORTANT: To sync all your extensions together, I would recommend an extension called "Settings Sync"
###### this will enable you to move all your settings you currently have to a new workplace.
    - name: Add VSC GPG apt key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add VSC Repository
      apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/code stable main
        state: present

###### Packer & Terraform Setup
###### Setup Packer & Terraform GPG key and repository.
    - name: Add Packer & Terraform GPG apt key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    - name: Add Packer & Terraform Repository
      apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main


###### The Holy Mary of Installing Packages #######
###### Complete installation of all the packages for Debian/Ubuntu distros
    - name: Update and install all system packages (This may take a few minutes so please be patient) ¯\_(ツ)_/¯
      apt:
        name: "{{ sys_packages }}"
        state: latest
        update_cache: yes

    ### IMPORTANT: There will be an error if you ONLY have pip3 installed
    ### since Ansible's module of pip will jump straight to pip, not pip3.
    - name: Install Docker module for Python
      pip:
        name: docker
        executable: pip3

###### Installing VSC Extensions            [ NEEDS WORK ]
#    - name: Add all extensions over to Visual Studio Code
#      command: code --install-extensions "{{ visual_studio_code_extensions }}"

###### Copy and execute script of imwheel
    - name: Run imwheel script
      script: mouse.sh

#    - name: Transfer imwheel script
#      copy:
#        src: mouse.sh
#        dest: /home/romelben/Documents
#        mode: 0755

#    - name: Execute the imwheel script configuration
#      command: sh /home/romelben/Documents/mouse.sh

###### Enable and start Bluetooth services on system
    - name: Enable and start Bluetooth services on system
      systemd:
          name: bluetooth.service
          enabled: yes
          state: started

###### Copy, confirm, and setup NTP on distro
    - name: Copy over the NTP configuration
      template:
        src: ntp.conf
        dest: /etc/ntp.conf
      tags: ntp

    - name: Confirm if NTP has initiated
      service:
        name: ntp
        state: started
        enabled: yes
      tags: ntp

    - name: Restart NTP server
      service:
        name: ntp
        state: restarted

###### Firewall setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming